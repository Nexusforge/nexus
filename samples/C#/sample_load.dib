#!markdown

# TODO
- test and improve F# plot sample
- get unit and other properties from Nexus more easily
- using var seems to be broken (i.e. for the client and the stream response)

#!csharp

// https://github.com/dotnet/interactive/issues/698
#i "nuget: https://www.myget.org/F/apollo3zehn-dev/api/v3/index.json"
#r "nuget: Nexus.Api, 1.0.0-beta.1.194"

#!markdown

Create client and authenticate

#!csharp

using Nexus.Api;

var refreshToken = "f9208f50-cd54-4165-8041-b5cd19af45a4%40nexus@vJuk9QUgSWGrQbOsJKEji/RntxjQEgBMC/5yDYo+FyL+wJ/NPkOcU1TBoQuNaNckn928FN7Kc5TSIUiyj+r/Bg==";

var uri = new Uri("https://localhost:8443");
var client = new NexusClient(uri);
await client.SignInAsync(refreshToken);

#!markdown

Get data from sample catalog `/IN_MEMORY/TEST/ACCESSIBLE`

#!csharp

using System.IO;

var begin = new DateTime(2020, 02, 01, 0, 0, 0, DateTimeKind.Utc);
var end = new DateTime(2020, 02, 02, 0, 0, 0, DateTimeKind.Utc);

// Get T1 data

/* Example: Transmit additional configuration which is understood only by the inmemory data source. */
double[] t1Data;

using (var disposable = client.AttachConfiguration(
    ("seed", "1"), 
    ("offset", "-5")))
{
    var response1 = await client.Data
        .GetStreamAsync("/IN_MEMORY/TEST/ACCESSIBLE", "T1", "1_s_mean", begin, end);

    t1Data = await response1.ReadAsync();
}

// Get V1 data
var response2 = await client.Data
    .GetStreamAsync("/IN_MEMORY/TEST/ACCESSIBLE", "V1", "1_s_mean", begin, end);

var v1Data = await response2.ReadAsync();

// timestamps
var timestamps = Enumerable
    .Range(0, t1Data.Length)
    .Select(x => begin.AddSeconds(x))
    .ToArray();

#!csharp

// metadata
var metadata = await client.Catalogs.GetAsync("/IN_MEMORY/TEST/ACCESSIBLE");

var t1Metadata = metadata.Resources.First(resource => resource.Id == "T1");
var t1Description = t1Metadata.Properties["Description"];
var t1Unit = t1Metadata.Properties["Unit"];

var v1Metadata = metadata.Resources.First(resource => resource.Id == "V1");
var v1Description = v1Metadata.Properties["Description"];
var v1Unit = v1Metadata.Properties["Unit"];

#!fsharp

#r "nuget: Plotly.NET, 2.0.0-preview.17"
#r "nuget: Plotly.NET.Interactive, 2.0.0-preview.17"

#!markdown

Plot data

#!fsharp

#!share --from csharp timestamps
#!share --from csharp t1Data
#!share --from csharp t1Description
#!share --from csharp t1Unit
#!share --from csharp v1Data
#!share --from csharp v1Description
#!share --from csharp v1Unit

// wait for https://github.com/dotnet/interactive/issues/1848 to be solved

open Plotly.NET

let t1Chart =
    Chart.Line(timestamps, t1Data, Name=t1Description)
        |> Chart.withAxisAnchor(Y=1)

let v1Chart =
    Chart.Line(timestamps, v1Data, Name=v1Description)
        |> Chart.withAxisAnchor(Y=2)

let twoXAxes = 
    [
        t1Chart
        v1Chart
    ]
    |> Chart.combine
    |> Chart.withYAxisStyle(
        $"axis 1 / {t1Unit}",
        Side=StyleParam.Side.Left,
        Id=StyleParam.SubPlotId.YAxis 1
    )
    |> Chart.withYAxisStyle(
        $"axis 2 / {v1Unit}",
        Side=StyleParam.Side.Right,
        Id=StyleParam.SubPlotId.YAxis 2,
        Overlaying=StyleParam.LinearAxisId.Y 1
    )
    |> Chart.show
