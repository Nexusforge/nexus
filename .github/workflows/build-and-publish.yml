name: Build and Publish

on:
  push:
    branches:
      - master
      - dev

    tags:
      - '*'

jobs:

  build:

    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Metadata
        id: metadata_builder
        run: echo "IS_RELEASE=${{ startsWith(github.ref, 'refs/tags/') }}" >> $GITHUB_ENV
          
      - name: Version
        id: version_builder
        run: |
          echo "VERSION=$(python build/print_version.py       ${{ github.run_number }} ${{ env.IS_RELEASE }} false)" >> $GITHUB_ENV
          echo "PYPI_VERSION=$(python build/print_version.py  ${{ github.run_number }} ${{ env.IS_RELEASE }} true)"  >> $GITHUB_ENV

      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Create Docker Output Folder
        run: mkdir --parent artifacts/images

      - name: Install
        run: |
         npm install -g pyright
         python -m pip install frictionless build wheel httpx pytest pytest-asyncio
         dotnet tool install -g Microsoft.Web.LibraryManager.Cli
         dotnet workload install --temp-dir tmp wasm-tools

      - name: Docker Setup
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build
        run: |
         (cd src/Nexus.UI && libman restore)
         dotnet publish -c Release -o app /p:Version=${{ env.VERSION }} /p:GeneratePackage=true src/Nexus/Nexus.csproj
         python -m build --wheel --outdir artifacts/packages --no-isolation src/clients/python-client
         python -m build --wheel --outdir artifacts/packages --no-isolation src/extensibility/python-extensibility

      - name: Docker Build
        uses: docker/build-push-action@v2
        with:
          context: .
          outputs: type=tar,dest=artifacts/images/nexus_image.tar

      - name: API
        run: |
         dotnet run --project src/Nexus.ClientGenerator/Nexus.ClientGenerator.csproj -- ./ openapi_new.json
         diff --strip-trailing-cr openapi.json openapi_new.json

      - name: Test
        run: |
         dotnet test -c Release /p:BuildProjectReferences=false
         pyright
         pytest

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          retention-days: 5
          path: |
            artifacts/packages/
            artifacts/images/

    outputs:
      is_release: ${{ env.IS_RELEASE }}
      version: ${{ env.VERSION }}

  publish_dev:

    needs: build
    name: Publish (dev)
    runs-on: ubuntu-latest

    if: ${{ needs.build.outputs.is_release != 'true' }}

    steps:

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts

      - name: Docker Load Image
        run: docker image import artifacts/images/nexus_image.tar ghcr.io/nexusforge/nexus:${{ needs.build.outputs.version }}

      - name: Nuget package (Github Registry)
        run: dotnet nuget push 'artifacts/packages/*.nupkg' --api-key ${GITHUB_TOKEN} --source https://nuget.pkg.github.com/nexusforge/index.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Python package (Github Registry)
        run: 'for filePath in artifacts/packages/*.whl; do curl -k -X POST https://www.myget.org/F/apollo3zehn-dev/python/upload -H "Authorization: Bearer ${MYGET_API_KEY}" -F "data=@$filePath"; done'
        env:
          MYGET_API_KEY: ${{ secrets.MYGET_API_KEY }}

      - name: Docker Login (Github Container Registry)
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Push
        run: docker push ghcr.io/nexusforge/nexus:${{ needs.build.outputs.version }}

  publish_release:

    needs: build
    name: Publish (release)
    runs-on: ubuntu-latest

    if: ${{ needs.build.outputs.is_release == 'true' }}

    steps:

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts

      - name: Docker Load Image
        run: docker image load --input artifacts/images/nexus_image.tar nexusforge/nexus:${{ needs.build.outputs.version }}
      - name: Annotation Tag
        run: python build/create_tag_body.py

      - name: GitHub Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          body_path: tag_body.txt

      - name: Nuget package (Nuget)
        run: dotnet nuget push 'artifacts/packages/*.nupkg' --api-key ${NUGET_API_KEY} --source https://api.nuget.org/v3/index.json
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Python Package (PyPI)
        run: twine upload artifacts/packages/*.whl -u__token__ -p"${PYPI_API_KEY}"
        env:
          PYPI_API_KEY: ${{ secrets.PYPI_API_KEY }}

      - name: Docker Login (Docker Hub)
        uses: docker/login-action@v1
        with:
          username: apollo3zehn
          password: ${{ secrets.DOCKER_API_KEY }}

      - name: Docker Push
        run: docker push nexusforge/nexus:${{ needs.build.outputs.version }}
