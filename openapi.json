{
  "x-generator": "NSwag v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Nexus REST API",
    "description": "Explore resources and get their data.",
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:5000"
    }
  ],
  "paths": {
    "/api/v1/artifacts/{artifactId}": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "summary": "Gets the specified artifact.",
        "operationId": "Artifacts_Download",
        "parameters": [
          {
            "name": "artifactId",
            "in": "path",
            "required": true,
            "description": "The artifact identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Gets the specified catalog.",
        "operationId": "Catalogs_Get",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "description": "The catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCatalog"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogs/{catalogId}/child-catalog-ids": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Gets a list of child catalog identifiers for the provided parent catalog identifier.",
        "operationId": "Catalogs_GetChildCatalogIds",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "description": "The parent catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogs/{catalogId}/timerange": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Gets the specified catalog's time range.",
        "operationId": "Catalogs_GetTimeRange",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "description": "The catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogTimeRange"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogs/{catalogId}/availability": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Gets the specified catalog availability.",
        "operationId": "Catalogs_GetAvailability",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "description": "The catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "begin",
            "in": "query",
            "description": "Start date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAvailability"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogs/{catalogId}/attachments/{attachmentId}/content": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Gets the specified attachment.",
        "operationId": "Catalogs_GetAttachementStream",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "description": "The catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The attachment identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/catalogs/{catalogId}/metadata": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Gets the catalog metadata.",
        "operationId": "Catalogs_GetMetadata",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "description": "The catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogMetadata"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Catalogs"
        ],
        "summary": "Puts the catalog metadata.",
        "operationId": "Catalogs_PutMetadata",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "description": "The catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "catalogMetadata",
          "description": "The catalog metadata to put.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogMetadata"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/data": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Gets the requested data.",
        "operationId": "Data_GetStream",
        "parameters": [
          {
            "name": "resourcePath",
            "in": "query",
            "required": true,
            "description": "The path to the resource data to stream.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "begin",
            "in": "query",
            "required": true,
            "description": "Start date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "End date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/export": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Creates a new export job.",
        "operationId": "Jobs_Export",
        "requestBody": {
          "x-name": "parameters",
          "description": "Export parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportParameters"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/load-packages": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Creates a new load packages job.",
        "operationId": "Jobs_LoadPackages",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/clear-cache": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Clears the catalog cache for the specified period of time.",
        "operationId": "Jobs_ClearCache",
        "parameters": [
          {
            "name": "catalogId",
            "in": "query",
            "required": true,
            "description": "The catalog identifier.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "begin",
            "in": "query",
            "required": true,
            "description": "Start date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "End date/time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Gets a list of jobs.",
        "operationId": "Jobs_GetJobs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{jobId}/status": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Gets the status of the specified job.",
        "operationId": "Jobs_GetJobStatus",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/jobs/{jobId}": {
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cancels the specified job.",
        "operationId": "Jobs_DeleteJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/packagereferences": {
      "get": {
        "tags": [
          "PackageReferences"
        ],
        "summary": "Gets the list of package references.",
        "operationId": "PackageReferences_Get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/PackageReference"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/packagereferences/{packageReferenceId}": {
      "put": {
        "tags": [
          "PackageReferences"
        ],
        "summary": "Puts a package reference.",
        "operationId": "PackageReferences_Put",
        "parameters": [
          {
            "name": "packageReferenceId",
            "in": "path",
            "required": true,
            "description": "The identifier of the package reference.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "packageReference",
          "description": "The package reference to put.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageReference"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "PackageReferences"
        ],
        "summary": "Deletes a package reference.",
        "operationId": "PackageReferences_Delete",
        "parameters": [
          {
            "name": "packageReferenceId",
            "in": "path",
            "required": true,
            "description": "The ID of the package reference.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/packagereferences/{packageReferenceId}/versions": {
      "get": {
        "tags": [
          "PackageReferences"
        ],
        "summary": "Gets package versions.",
        "operationId": "PackageReferences_GetVersions",
        "parameters": [
          {
            "name": "packageReferenceId",
            "in": "path",
            "required": true,
            "description": "The ID of the package reference.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sources/descriptions": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Gets the list of sources.",
        "operationId": "Sources_GetDescriptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtensionDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sources/registrations": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "Gets the list of backend sources.",
        "operationId": "Sources_GetRegistrations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/DataSourceRegistration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sources/registrations/{registrationId}": {
      "put": {
        "tags": [
          "Sources"
        ],
        "summary": "Puts a backend source.",
        "operationId": "Sources_PutRegistration",
        "parameters": [
          {
            "name": "registrationId",
            "in": "path",
            "required": true,
            "description": "The identifier of the registration.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "registration",
          "description": "The registration to put.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceRegistration"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Sources"
        ],
        "summary": "Deletes a backend source.",
        "operationId": "Sources_DeleteRegistration",
        "parameters": [
          {
            "name": "registrationId",
            "in": "path",
            "required": true,
            "description": "The identifier of the registration.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/users/authentication-schemes": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of available authentication schemes.",
        "operationId": "Users_GetAuthenticationSchemes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationSchemeDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/authenticate": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Authenticates the user.",
        "operationId": "Users_Authenticate",
        "parameters": [
          {
            "name": "scheme",
            "in": "query",
            "required": true,
            "description": "The authentication scheme to challenge.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "returnUrl",
            "in": "query",
            "required": true,
            "description": "The URL to return after successful authentication.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/signout": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Logs out the user.",
        "operationId": "Users_SignOut",
        "parameters": [
          {
            "name": "returnUrl",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/refresh-token": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Refreshes the JWT token.",
        "operationId": "Users_RefreshToken",
        "requestBody": {
          "x-name": "request",
          "description": "The refresh token request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A new pair of JWT and refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenPair"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/revoke-token": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Revokes a refresh token.",
        "operationId": "Users_RevokeToken",
        "requestBody": {
          "x-name": "request",
          "description": "The revoke token request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeTokenRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the current user.",
        "operationId": "Users_GetMe",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NexusUser"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/generate-refresh-token": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Generates a refresh token.",
        "operationId": "Users_GenerateRefreshToken",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a list of users.",
        "operationId": "Users_GetUsers",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NexusUser"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{userId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The identifier of the user.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{userId}/{claimId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Puts a claim.",
        "operationId": "Users_PutClaim",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The identifier of the user.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "claimId",
            "in": "path",
            "required": true,
            "description": "The identifier of claim.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "claim",
          "description": "The claim to put.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NexusClaim"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a claim.",
        "operationId": "Users_DeleteClaim",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The identifier of the user.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "claimId",
            "in": "path",
            "required": true,
            "description": "The identifier of the claim.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/writers/descriptions": {
      "get": {
        "tags": [
          "Writers"
        ],
        "summary": "Gets the list of writers.",
        "operationId": "Writers_GetDescriptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtensionDescription"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ResourceCatalog": {
        "type": "object",
        "description": "A catalog is a top level element and holds a list of resources.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier."
          },
          "properties": {
            "type": "object",
            "description": "The map of properties.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "resources": {
            "type": "array",
            "description": "The list of representations.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          }
        }
      },
      "Resource": {
        "type": "object",
        "description": "A resource is part of a resource catalog and holds a list of representations.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier."
          },
          "properties": {
            "type": "object",
            "description": "The map of properties.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "representations": {
            "type": "array",
            "description": "The list of representations.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Representation"
            }
          }
        }
      },
      "Representation": {
        "type": "object",
        "description": "A representation is part of a resource.",
        "additionalProperties": false,
        "properties": {
          "dataType": {
            "description": "The data type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NexusDataType"
              }
            ]
          },
          "samplePeriod": {
            "type": "string",
            "description": "The sample period.",
            "format": "duration"
          },
          "kind": {
            "description": "The representation kind.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RepresentationKind"
              }
            ]
          }
        }
      },
      "NexusDataType": {
        "type": "string",
        "description": "Specifies the Nexus data type.",
        "x-enumNames": [
          "UINT8",
          "UINT16",
          "UINT32",
          "UINT64",
          "INT8",
          "INT16",
          "INT32",
          "INT64",
          "FLOAT32",
          "FLOAT64"
        ],
        "enum": [
          "UINT8",
          "UINT16",
          "UINT32",
          "UINT64",
          "INT8",
          "INT16",
          "INT32",
          "INT64",
          "FLOAT32",
          "FLOAT64"
        ]
      },
      "RepresentationKind": {
        "type": "string",
        "description": "Specifies the representation kind.",
        "x-enumNames": [
          "Original",
          "Resampled",
          "Mean",
          "MeanPolarDeg",
          "Min",
          "Max",
          "Std",
          "Rms",
          "MinBitwise",
          "MaxBitwise",
          "Sum"
        ],
        "enum": [
          "Original",
          "Resampled",
          "Mean",
          "MeanPolarDeg",
          "Min",
          "Max",
          "Std",
          "Rms",
          "MinBitwise",
          "MaxBitwise",
          "Sum"
        ]
      },
      "CatalogTimeRange": {
        "type": "object",
        "description": "A catalog time range.",
        "additionalProperties": false,
        "properties": {
          "begin": {
            "type": "string",
            "description": "The date/time of the first data in the catalog.",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "The date/time of the last data in the catalog.",
            "format": "date-time"
          }
        }
      },
      "CatalogAvailability": {
        "type": "object",
        "description": "The catalog availability.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "description": "The actual availability data.",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "CatalogMetadata": {
        "type": "object",
        "description": "A structure for catalog metadata.",
        "additionalProperties": false,
        "properties": {
          "contact": {
            "type": "string",
            "description": "The contact.",
            "nullable": true
          },
          "isHidden": {
            "type": "boolean",
            "description": "A boolean which indicates if the catalog should be hidden."
          },
          "groupMemberships": {
            "type": "array",
            "description": "A list of groups the catalog is part of.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "overrides": {
            "description": "Overrides for the catalog.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResourceCatalog"
              }
            ]
          }
        }
      },
      "Job": {
        "type": "object",
        "description": "Description of a job.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "06f8eb30-5924-4a71-bdff-322f92343f5b",
            "format": "guid"
          },
          "type": {
            "type": "string",
            "description": "export"
          },
          "owner": {
            "type": "string",
            "description": "test@nexus.localhost"
          },
          "parameters": {
            "description": "Job parameters.",
            "nullable": true
          }
        }
      },
      "ExportParameters": {
        "type": "object",
        "description": "A structure for export parameters.",
        "additionalProperties": false,
        "properties": {
          "begin": {
            "type": "string",
            "description": "2020-02-01T00:00:00Z",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "2020-02-02T00:00:00Z",
            "format": "date-time"
          },
          "filePeriod": {
            "type": "string",
            "description": "00:00:00",
            "format": "duration"
          },
          "type": {
            "type": "string",
            "description": "Nexus.Writers.Csv"
          },
          "resourcePaths": {
            "type": "array",
            "description": "[\"/IN_MEMORY/TEST/ACCESSIBLE/T1/1_s_mean\", \"/IN_MEMORY/TEST/ACCESSIBLE/V1/1_s_mean\"]",
            "items": {
              "type": "string"
            }
          },
          "configuration": {
            "type": "object",
            "description": "{ \"RowIndexFormat\": \"Index\", \"SignificantFigures\": \"4\" }",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "JobStatus": {
        "type": "object",
        "description": "Describes the status of the job.",
        "additionalProperties": false,
        "properties": {
          "start": {
            "type": "string",
            "description": "The start date/time.",
            "format": "date-time"
          },
          "status": {
            "description": "The status.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              }
            ]
          },
          "progress": {
            "type": "number",
            "description": "The progress from 0 to 1.",
            "format": "double"
          },
          "exceptionMessage": {
            "type": "string",
            "description": "An optional exception message.",
            "nullable": true
          },
          "result": {
            "description": "The optional result.",
            "nullable": true
          }
        }
      },
      "TaskStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Created",
          "WaitingForActivation",
          "WaitingToRun",
          "Running",
          "WaitingForChildrenToComplete",
          "RanToCompletion",
          "Canceled",
          "Faulted"
        ],
        "enum": [
          "Created",
          "WaitingForActivation",
          "WaitingToRun",
          "Running",
          "WaitingForChildrenToComplete",
          "RanToCompletion",
          "Canceled",
          "Faulted"
        ]
      },
      "PackageReference": {
        "type": "object",
        "description": "A package reference.",
        "additionalProperties": false,
        "properties": {
          "provider": {
            "type": "string",
            "description": "The provider which loads the package."
          },
          "configuration": {
            "type": "object",
            "description": "The configuration of the package reference.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ExtensionDescription": {
        "type": "object",
        "description": "An extension description.",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "The extension type."
          },
          "description": {
            "type": "string",
            "description": "An optional description.",
            "nullable": true
          },
          "additionalInfo": {
            "type": "object",
            "description": "An optional dictionary with additional information.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "DataSourceRegistration": {
        "type": "object",
        "description": "A backend source.",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the backend source."
          },
          "resourceLocator": {
            "type": "string",
            "description": "An URL which points to the data.",
            "format": "uri"
          },
          "configuration": {
            "type": "object",
            "description": "Configuration parameters for the instantiated source.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "publish": {
            "type": "boolean",
            "description": "A boolean which indicates if the found catalogs should be available for everyone."
          },
          "disable": {
            "type": "boolean",
            "description": "A boolean which indicates if this backend source should be ignored."
          }
        }
      },
      "AuthenticationSchemeDescription": {
        "type": "object",
        "description": "Describes an OpenID connect provider.",
        "additionalProperties": false,
        "properties": {
          "scheme": {
            "type": "string",
            "description": "The scheme."
          },
          "displayName": {
            "type": "string",
            "description": "The display name."
          }
        }
      },
      "TokenPair": {
        "type": "object",
        "description": "A token pair.",
        "additionalProperties": false,
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The JWT token."
          },
          "refreshToken": {
            "type": "string",
            "description": "The refresh token."
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "description": "A refresh token request.",
        "additionalProperties": false,
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "The refresh token."
          }
        }
      },
      "RevokeTokenRequest": {
        "type": "object",
        "description": "A revoke token request.",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The refresh token."
          }
        }
      },
      "NexusUser": {
        "type": "object",
        "description": "Represents a user.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The user identifier."
          },
          "name": {
            "type": "string",
            "description": "The user name."
          },
          "refreshTokens": {
            "type": "array",
            "description": "The list of refresh tokens.",
            "items": {
              "$ref": "#/components/schemas/RefreshToken"
            }
          },
          "claims": {
            "type": "object",
            "description": "The map of claims.",
            "additionalProperties": {
              "$ref": "#/components/schemas/NexusClaim"
            }
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "description": "A refresh token.",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The refresh token."
          },
          "created": {
            "type": "string",
            "description": "The date/time when the token was created.",
            "format": "date-time"
          },
          "expires": {
            "type": "string",
            "description": "The date/time when the token expires.",
            "format": "date-time"
          },
          "revoked": {
            "type": "string",
            "description": "The date/time when the token was revoked.",
            "format": "date-time",
            "nullable": true
          },
          "replacedByToken": {
            "type": "string",
            "description": "The token that replaced this one.",
            "nullable": true
          },
          "isExpired": {
            "type": "boolean",
            "description": "A boolean that indicates if the token has expired."
          },
          "isRevoked": {
            "type": "boolean",
            "description": "A boolean that indicates if the token has been revoked."
          },
          "isActive": {
            "type": "boolean",
            "description": "A boolean that indicates if the token is active."
          }
        }
      },
      "NexusClaim": {
        "type": "object",
        "description": "Represents a claim.",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "The claim type."
          },
          "value": {
            "type": "string",
            "description": "The claim value."
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "description": "Please enter 'Bearer {your JWT token}'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}