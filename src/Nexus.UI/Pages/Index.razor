@inject IAppState AppState

@page "/"
@page "/{catalogId}"

<PageTitle>Nexus</PageTitle>

<div class="sm:row-start-2 sm:col-start-2 m-2 h-32 sm:h-72 overflow-auto flex flex-col">
    <ResourceCatalogView Catalog="AppState.RootCatalog" />
</div>

<div class="sm:row-start-2 sm:col-start-3 m-2 h-40 sm:h-72 min-w-0">
    @if (AppState.SelectedCatalog is null || AppState.SelectedCatalog.GetType() == typeof(FakeResourceCatalogViewModel))
    {
        <div class="flex w-full justify-center">
            <span class="text-gray-400">no data available</span>
        </div>
    }
    else
    {
        <SelectedResourceCatalogView Catalog="AppState.SelectedCatalog" />
    }
</div>

@if (AppState.SelectedCatalog is null || AppState.SelectedCatalog.GetType() == typeof(FakeResourceCatalogViewModel))
{
    <div class="sm:row-start-3 sm:col-start-2 sm:col-span-2 flex justify-center items-center text-gray-400">
        <span class="mr-3 text-4xl mdi mdi-pac-man"></span>
        <span>no data available</span>
    </div>
}
else if (!AppState.SelectedCatalog.Info.IsAccessible && AppState.SelectedCatalog.Info.License is not null)
{
    <div class="sm:row-start-3 sm:col-start-2 sm:col-span-2 flex flex-col">
        <span class="w-full text-center font-bold text-cyan-700 text-2xl mb-2">License</span>
        <div class="border border-cyan-700 bg-white p-3 text-xl">
            <MarkdownRenderer MarkdownString="@AppState.SelectedCatalog.Info.License"></MarkdownRenderer>
        </div>
        <div class="flex justify-center m-3">
            <form action="/api/v1/users/accept-license">
                <input type="hidden" name="catalogId" value="@AppState.SelectedCatalog.Id" /> 
                <input class="w-20 p-1 rounded bg-cyan-700 flex justify-center items-center text-gray-200 cursor-pointer hover:bg-cyan-600" type="submit" value="Accept" />
            </form>
        </div>
    </div>
}
else
{
    <div class="sm:row-start-3 sm:col-start-2 sm:col-span-2 flex bg-gray-100 p-2">
        <div class="flex flex-col">
            <div>
                <UITextBox
                    @bind-Value="AppState.SearchString"
                    Label="Search" 
                    Icon="magnify"
                    DarkMode="false">
                </UITextBox>

                @if (AppState.GroupedResources is not null)
                {
                    @foreach (var entry in AppState.GroupedResources)
                    {
                        <div class="flex justify-between items-end p-1 border border-transparent hover:border-cyan-600 cursor-pointer">
                            <span class="font-bold text-cyan-800">@entry.Key</span>
                            <span class="text-sm text-gray-500">@entry.Value.Count</span>
                        </div>
                    }
                }
            </div>
        </div>
        <div class="row-start-3 col-start-3 flex flex-col">
            @if (AppState.SelectedResourceGroup is not null)
            {
                @foreach (var resource in AppState.SelectedResourceGroup)
                {
                    <span>@resource.Id</span>
                }
            }
        </div>
    </div>
}

@code {

    protected override Task OnParametersSetAsync()
    {
        return AppState.SelectCatalogAsync(CatalogId);
    }

    [Parameter]
    public string? CatalogId { get; set; }
}

