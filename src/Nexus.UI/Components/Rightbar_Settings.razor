@implements IDisposable
@inject IAppState AppState

<div>

    <UISelect 
        Label="File Period"
        Items="_items"
        IsEditable="true"
        @bind-SelectedItem="AppState.Settings.FilePeriod">
    </UISelect>

    @if (AppState.Settings.ExtensionDescriptions is not null)
    {
        <UISelect 
            Label="File Type"
            Items="AppState.Settings.Items"
            @bind-SelectedItem="AppState.Settings.FileType">
        </UISelect>

        @if (AppState.Settings.ExtensionDescription is not null && 
             AppState.Settings.ExtensionDescription.AdditionalInformation.TryGetProperty("options", out var optionsElement) &&
             optionsElement.ValueKind == JsonValueKind.Array)
        {
            @foreach (var option in optionsElement.EnumerateArray())
            {
                @if (option.ValueKind == JsonValueKind.Object &&
                    option.TryGetStringValue("type", out var type) && type == "input-integer" &&
                    option.TryGetStringValue("configuration-key", out var configurationKey) &&
                    option.TryGetStringValue("label", out var label) &&
                    option.TryGetIntegerValue("default", out var defaultValue) &&
                    option.TryGetIntegerValue("minimum", out var minimum) &&
                    option.TryGetIntegerValue("maximum", out var maximum))
                {
                    <UIOption Key="@configurationKey" DefaultValue="defaultValue.Value" Store="AppState.Settings.Configuration">
                        <ChildContent>
                            <UINumericTextBox 
                                @bind-Value="@context.Value"
                                Label="@label"
                                Minimum="minimum.Value"
                                Maximum="maximum.Value">
                            </UINumericTextBox>
                        </ChildContent>
                    </UIOption>
                }
                else if (option.ValueKind == JsonValueKind.Object &&
                    option.TryGetStringValue("type", out var type2) && type2 == "select" &&
                    option.TryGetStringValue("configuration-key", out var configurationKey2) &&
                    option.TryGetStringValue("label", out var label2) &&
                    option.TryGetStringValue("default", out var defaultValue2))
                {
                    <UIOption Key="@configurationKey2" DefaultValue="defaultValue2" Store="AppState.Settings.Configuration">
                        <UISelect 
                            @bind-SelectedItem="@context.Value"
                            Items="@(option.GetStringDictionary("items") ?? new Dictionary<string, string>())"
                            Label="@label2">
                        </UISelect>
                    </UIOption>
                }
            }
        }
    }

</div>

@code {

    private PropertyChangedEventHandler _handler;

    public Rightbar_Settings()
    {
        _handler = (sender, e) => 
        {
            if (e.PropertyName == nameof(AppState.ExportParameters))
                StateHasChanged();
        };
    }

    private Dictionary<Period, string> _items = new Dictionary<Period, string>()
    {
        [new Period(TimeSpan.Zero)] = "Single File",
        [new Period(TimeSpan.FromMinutes(1))] = "1 min",
        [new Period(TimeSpan.FromMinutes(10))] = "10 min",
        [new Period(TimeSpan.FromHours(1))] = "1 h",
        [new Period(TimeSpan.FromHours(24))] = "1 d"
    };

    protected override void OnInitialized()
    {
        AppState.PropertyChanged += _handler;
    }

    protected override Task OnInitializedAsync()
    {
        return AppState.Settings.InitializeTask.Value;
    }

    public void Dispose()
    {
        AppState.PropertyChanged -= _handler;
    }
}
