@using System.Net
<div class="h-full flex flex-col">
    <h1 class="py-0.5 font-bold text-cyan-700">
        @Utilities.ToSpaceFilledCatalogId(Catalog.Id)
        @* Fake icon for correct height *@
        <span class="text-xl mdi-chevron-down invisible"></span>
    </h1>

    <div class="flex-1 overflow-auto text-gray-500">
        @if (_readme is not null)
        {
            <MarkdownRenderer MarkdownString="@_readme"></MarkdownRenderer>
        }
        else
        {
            <span class="text-sm">@Catalog.Info.Title</span>
        }
    </div>

    @if (Catalog is RealResourceCatalogViewModel && Catalog.Info.IsAccessible)
    {
        <div class="flex justify-between items-center flex-wrap text-gray-500">
            <div class="text-sm">
                @if (_timeRange is not null)
                {
                    <span class="hidden sm:inline font-bold">Start:</span>
                    <span class="">@_timeRange.Begin.ToString("yyyy-MM-dd")</span>
                    <span class="mx-2">-</span>
                    <span class="hidden sm:inline font-bold">End:</span>
                    <span class="">@_timeRange.End.ToString("yyyy-MM-dd")</span>
                }
            </div>
            <div class="flex">
                @if (Catalog.Info.License is not null)
                {
                    <div class="flex justify-center items-center rounded-full w-12 h-12 hover:bg-gray-200 cursor-pointer"
                        @onclick="OpenLicenseModal">
                        <span class="text-xl mdi mdi-format-section"></span>
                    </div>
                }
                <div class="flex justify-center items-center rounded-full w-12 h-12 hover:bg-gray-200 cursor-pointer"
                    @onclick="OpenAttachmentModal">
                    <span class="text-xl mdi mdi-paperclip"></span>
                </div>
            </div>
        </div>
    }
</div>

<Modal @bind-IsOpen="_isLicenseModalOpen" Title="License" Width="600px">
    @if (Catalog.Info.License is not null)
    {
        <MarkdownRenderer MarkdownString="@Catalog.Info.License"></MarkdownRenderer>
    }
</Modal>

<Modal @bind-IsOpen="_isAttachmentModalOpen" Title="Attachments" Width="400px">
    @if (_attachments is not null)
    {
        @foreach (var attachment in _attachments)
        {
            <a class="flex items-center hover:bg-gray-300 rounded-lg p-0.5" href="@GetHref(attachment)">
                <span class="text-2xl mr-1 mdi mdi-@(GetIcon(attachment))"></span>
                <span>@attachment</span>
            </a>
        }
    }
</Modal>

@code {
    [Parameter]
    public ResourceCatalogViewModel Catalog { get; set; } = default!;

    [Inject]
    public INexusClient Client { get; set; } = default!;

    private bool _isLicenseModalOpen;
    private bool _isAttachmentModalOpen;
    private CatalogTimeRange? _timeRange;
    private IList<string>? _attachments;

    private string? _readme;

    protected override void OnParametersSet()
    {
        if (Catalog.Info.IsAccessible)
        {
            _ = Task.Run(async () =>
            {
                _timeRange = await Catalog.TimeRangeTask.Value;
                StateHasChanged();
            });

            _ = Task.Run(async () =>
            {
                try
                {
                    _readme = await Catalog.ReadmeTask.Value;
                    StateHasChanged();
                }
                catch
                {
                    //
                }
            });
        }
    }

    private void OpenLicenseModal()
    {
        _isLicenseModalOpen = true;
    }

    private void OpenAttachmentModal()
    {
        _attachments = null;
        _isAttachmentModalOpen = true;

        _ = Task.Run(async () =>
        {
            _attachments = await Client.Catalogs.GetAttachmentsAsync(Catalog.Id, CancellationToken.None);
            StateHasChanged();
        });
    }

    private string GetIcon(string attachmendId)
    {
        var extension = Path.GetExtension(attachmendId);

        return extension switch
        {
            ".docx" => "file-word",
            ".xlsx" => "file-excel",
            ".pptx" => "file-powerpoint",
            ".pdf" => "file-pdf-box",
            ".jpg" => "file-image",
            ".jpeg" => "file-image",
            ".png" => "file-image",
            ".tiff" => "file-image",
            _ => "file"
        };
    }

    public string GetHref(string attachmentId)
    {
        return $"api/v1/catalogs/{WebUtility.UrlEncode(Catalog.Id)}/attachments/{WebUtility.UrlEncode(Path.GetFileName(attachmentId))}/content";
    }
}



