@inject IAppState AppState
@inject NexusClient Client

<div class="bg-cyan-900 hidden xl:flex flex-col  p-3 @CssClass">

    <div>

        <UITextBox Label="File Period" Value="FilePeriod">
        </UITextBox>

        @if (_extensionDescriptions is not null)
        {
            <UISelect 
                Label="File Type" 
                Items="_items"
                Values="_values"
                Value="@AppState.ExportParameters.Type">
            </UISelect>
        }

    </div>

    <div class="flex-1">
        @foreach (var selection in AppState.SelectedCatalogItems)
        {
            <CatalogItemSelectionView CatalogItemSelection="selection" OnDoubleClick="() => AppState.SelectedCatalogItems.Remove(selection)" />
        }
    </div>

    <UIButton Icon="download-outline" Label="Export" OnClick="ExportAsync"></UIButton>

</div>

@code {

    [Parameter]
    public string? CssClass { get; set; }

    private IList<ExtensionDescription>? _extensionDescriptions;
    private List<string> _values = new List<string>();
    private List<string> _items = new List<string>();

    private Period FilePeriod 
    {
        get => new Period(AppState.ExportParameters.FilePeriod);
        set => AppState.ExportParameters = AppState.ExportParameters with { FilePeriod = value.Value };
    }

    protected override async Task OnInitializedAsync()
    {
        const string FORMAT_NAME_KEY = "UI:FormatName";

        _extensionDescriptions = (await Client.Writers
            .GetDescriptionsAsync(CancellationToken.None))
            .Where(description => 
                description.AdditionalInfo is not null && 
                description.AdditionalInfo.ContainsKey(FORMAT_NAME_KEY))
            .ToList();

        if (_extensionDescriptions.Any())
        {
            AppState.ExportParameters = AppState.ExportParameters with
            { 
                Type = _extensionDescriptions.First().Type 
            };
        }

        foreach (var description in _extensionDescriptions)
        {
            var item = description.AdditionalInfo![FORMAT_NAME_KEY];

            _items.Add(item);
            _values.Add(description.Type);
        }
    }

    public Task ExportAsync()
    {
        return Client.Jobs.ExportAsync(AppState.ExportParameters, CancellationToken.None);
    }
}