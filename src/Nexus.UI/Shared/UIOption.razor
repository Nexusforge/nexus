@typeparam T

@ChildContent(this)

@code {

        private T _value = default!;

        [Parameter]
        public string Key { get; set; } = null!;

        [Parameter]

        public T DefaultValue { get; set; } = default!;

        [Parameter]
        public IDictionary<string, string> Store { get; set; } = null!;

        [Parameter]
        public RenderFragment<UIOption<T>> ChildContent { get; set; } = null!;

        public T Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
                this.Store[this.Key] = value.ToString()!;
            }
        }

        protected override void OnInitialized()
        {
            // ensure there is some value to assign
            if (!this.Store.TryGetValue(this.Key, out var value))
            {
                value = this.DefaultValue.ToString()!;
                this.Store[this.Key] = value;
            }

            // get new value
            T newValue;

            if (typeof(T) == typeof(string))
                newValue = (T)(object)value;

            else if (typeof(T) == typeof(int))
                newValue = (T)(object)int.Parse(value);

            else
                throw new ArgumentException("Unsupported type.");

            // if value has changed, trigger a rerender
            if (_value is null || !_value.Equals(newValue))
            {
                _value = newValue;
                this.StateHasChanged();
            }

            base.OnInitialized();
        }
}