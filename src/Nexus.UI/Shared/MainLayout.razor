@inherits LayoutComponentBase
@inject IAppState AppState
@inject IJSInProcessRuntime JSInProcessRuntime
@inject NavigationManager NavigationManager

<AuthorizeView>

    <Authorized>
        <div class="flex-1 overflow-auto grid sm:grid-cols-[auto,1fr,1fr,auto] sm:grid-rows-[auto,auto,1fr]">

            <div class="sm:col-span-4">
                <Navbar OpenHamburgerMenu="() => _isHamburgerMenuOpen = true" />
            </div>

            @if (!_isHamburgerMenuOpen)
            {
                <div class="col-start-1 row-start-2 row-span-2 bg-cyan-900 hidden xl:flex flex-col justify-between p-3 w-72">
                    <Leftbar_Settings />
                    <div class="flex-1 overflow-y-auto styled-scrollbars">
                        <Leftbar_CatalogItems />
                    </div>
                    <Leftbar_Actions />
                </div>
            }

            @Body

            @if (!_isHamburgerMenuOpen)
            {
                <div class="col-start-4 row-start-2 row-span-2 bg-cyan-900 hidden xl:flex flex-col p-3 w-72">
                    <Rightbar_Settings />
                    <div class="mt-auto my-3">
                        <Rightbar_Jobs />
                    </div>
                    <Rightbar_Actions />
                </div>
            }

        </div>
        @if (_isHamburgerMenuOpen)
        {
            <HamburgerMenu @bind-IsOpen="_isHamburgerMenuOpen" Width="w-72" />
        }
    </Authorized>

    <NotAuthorized>
        @foreach (var scheme in AppState.AuthenticationSchemes)
        {
            <form action="/api/v1/users/authenticate">
                <input type="hidden" name="scheme" value="@scheme.Scheme" /> 
                <input type="hidden" name="returnUrl" value="@NavigationManager.Uri" /> 
                <input type="submit" value="Login via @scheme.DisplayName" />
            </form>
        }
    </NotAuthorized>

</AuthorizeView>

@code {
    private bool _isHamburgerMenuOpen;
}