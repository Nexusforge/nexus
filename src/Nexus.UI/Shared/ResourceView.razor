@inject IAppState AppState

<div class="flex w-full">

    <div class="flex flex-col p-2 select-none w-36 sm:w-72">

        <UITextBox
            @bind-Value="AppState.SearchString"
            Label="Search"
            Icon="@_searchIcon"
            OnIconClick="() => AppState.SearchString = default"
            OnInput="true"
            DarkMode="false">
        </UITextBox>

        <div class="overflow-y-auto">
            @if (AppState.CatalogItemsMap is not null)
            {
                @foreach (var entry in AppState.CatalogItemsMap)
                {
                    @if (entry.Value == AppState.CatalogItems)
                    {
                        <div class="flex justify-between items-end py-0.5 px-1 cursor-pointer">
                            <UITooltip Tooltip="@entry.Key">
                                <span class="font-bold text-orange-500">@entry.Key</span>
                            </UITooltip>
                            <span class="text-sm text-gray-500">@entry.Value.Count</span>
                        </div>
                    }
                    else
                    {
                        <div class="flex justify-between items-end py-0.5 px-1 cursor-pointer"
                            @onclick="() => AppState.CatalogItems = entry.Value">
                            <UITooltip Tooltip="@entry.Key">
                                <span class="font-bold text-cyan-800">@entry.Key</span>
                            </UITooltip>
                            <span class="text-sm text-gray-500">@entry.Value.Count</span>
                        </div>
                    }
                }
            }
        </div>
    </div>
    <div class="flex-1 flex flex-col p-2 overflow-y-auto select-none">
        @if (AppState.CatalogItems is not null)
        {
            <Virtualize Items="AppState.CatalogItems" Context="catalogItem">
                <div class="flex flex-col p-1 border-b border-transparent hover:border-orange-500 cursor-pointer mb-2"
                    @onclick="() => AppState.Settings.ToggleCatalogItemSelection(catalogItem)">
                    <div class="flex items-center">
                        <span class="font-bold whitespace-nowrap @(AppState.Settings.IsSelected(catalogItem) ? "text-orange-500" : "text-cyan-800")">
                            @catalogItem.Resource.Id&nbsp;:&nbsp;@Utilities.ToUnitString(catalogItem.Representation.SamplePeriod)
                        </span>
                        <span class="text-gray-500 whitespace-nowrap mx-2">@catalogItem.Unit</span>

                        @if (catalogItem.Warning is not null)
                        {
                            <UITooltip Tooltip="@catalogItem.Warning">
                                <span class="mdi mdi-alert ml-2 mr-1 text-orange-500"></span>
                                <span class="hidden sm:inline text-orange-500">@catalogItem.Warning</span>
                            </UITooltip>
                        }
                    </div>
                    <UITooltip Tooltip="@catalogItem.Description">
                        <span class="text-sm text-gray-500">@catalogItem.Description</span>
                    </UITooltip>
                </div>
            </Virtualize>
        }
    </div>

</div>

@code {

    private string _searchIcon = "magnify";

    protected override void OnInitialized()
    {
        AppState.PropertyChanged += (sender, e) => 
        {
            if (e.PropertyName == nameof(AppState.CatalogItemsMap))
                StateHasChanged();

            else if (e.PropertyName == nameof(AppState.SearchString))
            {
                _searchIcon = string.IsNullOrWhiteSpace(AppState.SearchString)
                    ? "magnify"
                    : "close";
            }
        };

        AppState.Settings.PropertyChanged += (sender, e) => 
        {
            if (e.PropertyName == nameof(AppState.Settings.SelectedCatalogItems))
                StateHasChanged();
        };
    }
}

