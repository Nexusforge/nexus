@using System.Text.RegularExpressions
@inject IAppState AppState
@inject IJSInProcessRuntime JSInProcessRuntime

<div class="group text-gray-200 cursor-pointer hover:bg-cyan-800 p-2 pt-1 rounded select-none">
    <div>
        <span class="text-sm text-gray-400">@Utilities.ToSpaceFilledCatalogId(SelectedItem.BaseItem.Catalog.Id)&nbsp;/&nbsp;</span>
        <span class="text-sm">@SelectedItem.BaseItem.Resource.Id</span>
    </div>
    <div class="flex flex-wrap gap-1">

        @foreach (var kind in SelectedItem.Kinds)
        {
            <div class="nexus-pill nexus-hover-parent min-w-[6em] h-6 text-xs text-white font-bold rounded bg-teal-600 flex flex-col" placeholder="@kind">
                <div class="nexus-hover-hide py-1 text-center">@kind</div>
                <div class="hidden flex-1 flex nexus-hover-flex">
                    <div @onclick="() => CopyToClipboard(kind)" class="flex-1 hover:bg-teal-500 rounded-l mdi mdi-content-copy flex justify-center items-center"></div>
                    <div @onclick="() => RemoveRepresentationKind(kind)" class="flex-1 hover:bg-teal-500 rounded-r mdi mdi-close flex justify-center items-center"></div>
                </div>
            </div>
        }

        @if (_kinds.Any())
        {
            <div class="invisible group-hover:visible">
                <UISpecialSelect
                    Label="+"
                    Items="_kinds"
                    OnItemSelected="(RepresentationKind newKind) => AddRepresentationKind(newKind)">
                </UISpecialSelect>
            </div>
        }
    </div>
</div>

@code {

    private static Regex _snakeCaseEvaluator = new Regex("(?<=[a-z])([A-Z])", RegexOptions.Compiled);

    private Dictionary<RepresentationKind, string> _kinds = default!;

    [Parameter]
    public CatalogItemSelectionViewModel SelectedItem { get; set; } = default!;

    protected override void OnParametersSet()
    {
        _kinds = GetKinds();
    }
  
    private string GetResourcePath(RepresentationKind kind)
    {
        var baseItem = SelectedItem.BaseItem;
        var samplePeriodString = Utilities.ToUnitString(AppState.Settings.SamplePeriod.Value, withUnderScore: true);
        var baseSamplePeriodString = Utilities.ToUnitString(baseItem.Representation.SamplePeriod, withUnderScore: true);
        var snakeCaseKind = _snakeCaseEvaluator.Replace(kind.ToString(), "_$1").Trim().ToLower();
        var representationId = $"{samplePeriodString}_{snakeCaseKind}";
        var resourcePath = $"{baseItem.Catalog.Id}/{baseItem.Resource.Id}/{representationId}#base={baseSamplePeriodString}";

        return resourcePath;
    }

    private void CopyToClipboard(RepresentationKind kind)
    {
        JSInProcessRuntime.InvokeVoid("nexus.util.copyToClipboard", GetResourcePath(kind));
    }

    private void AddRepresentationKind(RepresentationKind kind)
    {
        SelectedItem.Kinds.Add(kind);
        _kinds = GetKinds();
    }

    private void RemoveRepresentationKind(RepresentationKind kind)
    {
        if (SelectedItem.Kinds.Count == 1)
        {
            AppState.Settings.ToggleCatalogItemSelection(SelectedItem.BaseItem);
        }
        
        else
        {
            SelectedItem.Kinds.Remove(kind);
            _kinds = GetKinds();
        }
    }

    private string GetId()
    {
        return $"{@SelectedItem.BaseItem.Catalog.Id}/{@SelectedItem.BaseItem.Resource.Id}";
    }

    private Dictionary<RepresentationKind, string> GetKinds()
    {
        var samplePeriod = AppState.Settings.SamplePeriod;
        var baseSamplePeriod = SelectedItem.BaseItem.Representation.SamplePeriod;

        return Enum
            .GetValues<RepresentationKind>()
            .Where(kind => 
            {
                return 
                    !(SelectedItem.Kinds.Contains(kind) ||
                    kind == RepresentationKind.Resampled && samplePeriod.Value >= baseSamplePeriod ||
                    kind == RepresentationKind.Original && samplePeriod.Value != baseSamplePeriod ||
                    kind > RepresentationKind.Original && samplePeriod.Value <= baseSamplePeriod);
            })
            .ToDictionary(kind => kind, kind => kind.ToString());
    }
}





