@typeparam T

<div class="mb-7 pt-3 pb-2 relative text-gray-200 select-none border-b border-white hover:border-orange-500 hover:bg-cyan-800">

    <div id="@_id" class="px-3 cursor-pointer" @onmouseup="ToggleIsOpen">
        <label class="block text-xs text-gray-300 cursor-pointer">@Label</label>

        <div>
            @if (IsEditable)
            {
                <input type="text" @bind="SelectedItem" />
            }
            else
            {
                @Items[SelectedItem]
            }
        </div>
    </div>

    @if (_isOpen)
    {
        <div class="mt-2 absolute border border-orange-500 bg-cyan-900 z-50 w-full cursor-pointer">
            @foreach (var entry in Items)
            {
                <div class="px-3 py-2 text-gray-200 bg-cyan-900 hover:bg-cyan-800 @(entry.Key.Equals(SelectedItem) ? "bg-cyan-800" : "")"
                    @onclick="() => SelectedItem = entry.Key">
                    @entry.Value
                </div>
            }
        </div>
    }

</div>

@code {

    private Guid _id = Guid.NewGuid();
    private DotNetObjectReference<UISelect<T>> _dotNetHelper;
    private bool _isOpen;
    private T _selectedItem = default!;

    public UISelect()
    {
        _dotNetHelper = DotNetObjectReference.Create(this);
    }

    [Inject]
    public IJSInProcessRuntime JSRuntime { get; set; } = default!;

    [Parameter]
    public T SelectedItem
    {
        get => _selectedItem;
        set
        {
            if (!value.Equals(_selectedItem)) {
                _selectedItem = value;

                if (SelectedItemChanged.HasDelegate)
                    SelectedItemChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public string Label { get; set; } = default!;

    [Parameter]
    public bool IsEditable { get; set; } = default!;

    [Parameter]
    public EventCallback<T> SelectedItemChanged { get; set; }

    [Parameter]
    public IDictionary<T, string> Items { get; set; } = default!;

    [JSInvokable]
    public void OnClickExceptSelf()
    {
        _isOpen = false;
        StateHasChanged();
    }
    
    private void ToggleIsOpen()
    {
        _isOpen = !_isOpen;

        if (_isOpen)
            JSRuntime.InvokeVoid("nexus.util.addClickExceptSelfEvent", _id, _dotNetHelper);
    }
}