@if (IsOpen)
{

    <div class="top-0 left-0 flex justify-center items-center fixed w-full z-40 h-full @(IsOpen ? "" : "hidden")">
        
        <div class="absolute top-0 left-0 w-full h-full bg-black opacity-50" @onclick="CloseAsync"></div>

        <div class="absolute rounded-xl w-11/12 sm:w-[@Width] @(AutoHeight ? "" : "h-3/4") bg-gray-100 flex flex-col">

            <div class="h-16 flex justify-center items-center border-b border-gray-300">
                <h1 class="text-xl font uppercase text-cyan-700 tracking-widest">@Title</h1>
            </div>

            <div class="flex-1 p-3 overflow-y-auto bg-white">
                @ChildContent
            </div>

            <div class="h-16 flex justify-between items-center border-t border-gray-300 px-5">

                <div>
                    @Footer
                </div>

                <div
                    class="w-20 p-1 rounded bg-cyan-700 flex justify-center items-center text-gray-200 cursor-pointer hover:bg-cyan-600"
                    @onmousedown="CloseAsync">
                    Close
                </div>
            </div>

        </div>
    </div>

}

@code {
    [Parameter] 
    public bool IsOpen { get; set; }

    [Parameter]
    public bool AutoHeight { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public string Width { get; set; } = default!;

    [Parameter] 
    public string Title { get; set; } = default!;

    [Parameter]
    public RenderFragment Footer { get; set; } = default!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    private async Task CloseAsync()
    {
        await IsOpenChanged.InvokeAsync(false);
    }
}