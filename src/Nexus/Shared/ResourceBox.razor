@inherits StateComponentBase
@inject IHttpContextAccessor ContextAccessor

@if (this.UserState.GroupedResources != null) // user has access to catalog
{
    <div class="available-groups">

        <MatTextField @bind-Value="this.UserState.SearchString"
                      OnInput="e => this.UserState.SearchString = e.Value.ToString()"
                      Label="Search"
                      Icon="@_searchIcon"
                      IconOnClick="@(() => this.UserState.SearchString = "")"
                      IconTrailing="true">
        </MatTextField>

        <div class="available-groups-list">
            @foreach (var entry in this.UserState.GroupedResources.OrderBy(entry => entry.Key).Skip(this.GroupPage * this.GroupPageSize).Take(this.GroupPageSize))
            {
                <div @onclick="() => this.UserState.GroupedResourcesEntry = entry"
                     class="group-entry @(this.UserState.GroupedResourcesEntry.Equals(entry) ? "selected" : "")">
                    <span class="group-entry-name">@entry.Key</span>
                    <span class="group-entry-count">@entry.Value.Count</span>
                </div>
            }
        </div>

        <Paginator Length="this.UserState.GroupedResources.Count" PageSize="this.GroupPageSize" @bind-Page="this.GroupPage"></Paginator>
    </div>

    <div class="available-resources">
        @if (this.UserState.GroupedResourcesEntry.Value != null)
        {
            <div>
                @foreach (var resource in this.UserState.GroupedResourcesEntry.Value.Skip(this.ResourcePage * this.ResourcePageSize).Take(this.ResourcePageSize))
                {
                    <ResourceExpander Resource="@resource" />
                }
            </div>

            <Paginator Length="this.UserState.GroupedResourcesEntry.Value.Count" PageSize="this.ResourcePageSize" @bind-Page="this.ResourcePage"></Paginator>
        }
    </div>
}
else if (this.UserState.CatalogContainer != null) // user has no access to catalog
{
    <div class="flex-centered h-100 w-100">
        @if (this.ContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            <!--
            @if (this.UserState.CatalogContainer.CatalogMeta.License.LicensingScheme == DataModel.CatalogLicensingScheme.ManualRequest)
            {
                <span>You do not have access to this catalog.@(!string.IsNullOrWhiteSpace(this.UserState.CatalogContainer.CatalogMeta.Contact) ? $" Please contact {this.UserState.CatalogContainer.CatalogMeta.Contact} to request permission." : "")</span>
            }
            else if (this.UserState.CatalogContainer.CatalogMeta.License.LicensingScheme == DataModel.CatalogLicensingScheme.AcceptLicense)
            {
                <MatButton Outlined="true" Icon="@MatIconNames.Lock_open" @onclick="this.OpenLicenseDialog">Unlock</MatButton>
            }
            -->
        }
        else
        {
            <span>You are not logged in. Access to catalog denied.</span>
        }
    </div>

    <LicensingModal @bind-IsOpen="this.LicenseDialogIsOpen" />
}