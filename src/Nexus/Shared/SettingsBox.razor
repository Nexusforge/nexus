@inherits StateComponentBase

<div>
    <MatDatePicker class="settings-control"
                   Label="From (UTC)"
                   Format="dd.MM.yyyy HH:mm"
                   @bind-Value="this.UserState.DateTimeBeginWorkaround"
                   EnableTime="true"
                   EnableSeconds="false"
                   Enable24hours="true"
                   AllowInput="true">
    </MatDatePicker>

    <MatDatePicker class="settings-control"
                   Label="To (UTC)"
                   Format="dd.MM.yyyy HH:mm"
                   @bind-Value="this.UserState.DateTimeEndWorkaround"
                   EnableTime="true"
                   EnableSeconds="false"
                   Enable24hours="true"
                   AllowInput="true">
    </MatDatePicker>

    <MatSelectItem class="settings-control"
                   Label="File Period"
                   @bind-Value="this.UserState.FilePeriod"
                   Items="new List<TimeSpan>() { TimeSpan.FromDays(1), TimeSpan.FromHours(1), TimeSpan.FromMinutes(10), TimeSpan.FromMinutes(1), TimeSpan.Zero }">
        <ItemTemplate Context="value">
            @if (value == TimeSpan.FromDays(1))
            {
                @:1 file per day
            }
            else if (value == TimeSpan.FromHours(1))
            {
                @:1 file per hour
            }
            else if (value == TimeSpan.FromMinutes(10))
            {
                @:1 file per minute
            }
            else if (value == TimeSpan.FromMinutes(1))
            {
                @:1 file per 10 minutes
            }
            else
            {
                @:Single file
            }
        </ItemTemplate>
    </MatSelectItem>

    <MatSelectItem class="settings-control"
                   Label="File Format"
                   @bind-Value="this.UserState.Writer"
                   Items="this.AppState.DataWriterInfoMap.Keys.ToList()">
        <ItemTemplate Context="key">
            @this.AppState.DataWriterInfoMap[key].FormatName
        </ItemTemplate>
    </MatSelectItem>

    @if (this.AppState.DataWriterInfoMap.TryGetValue(this.UserState.Writer, out var value))
    {
        foreach (var option in value.Options)
        {
            DataWriterSelectOptionAttribute selectOption;
            DataWriterIntegerNumberInputOptionAttribute numberInputOption;

            if ((selectOption = option as DataWriterSelectOptionAttribute) is not null)
            {
                <DataWriterOption Key="@selectOption.ConfigurationKey" DefaultValue="selectOption.DefaultValue" Store="this.UserState.Configuration">
                    <MatSelectItem class="settings-control"
                                   @bind-Value="@context.Value"
                                   Label="@selectOption.Label"
                                   Items="@selectOption.KeyValueMap.Keys.ToList()">
                        <ItemTemplate Context="key">
                            @selectOption.KeyValueMap[key]
                        </ItemTemplate>
                    </MatSelectItem>
                </DataWriterOption>
            }
            else if ((numberInputOption = option as DataWriterIntegerNumberInputOptionAttribute) is not null)
            {
                <DataWriterOption Key="@numberInputOption.ConfigurationKey" DefaultValue="numberInputOption.DefaultValue" Store="this.UserState.Configuration">
                    <MatNumericUpDownField class="settings-control"
                                           @bind-Value="@context.Value"
                                           Label="@numberInputOption.Label"
                                           DecimalPlaces=0
                                           Minimum=numberInputOption.Minmum
                                           Maximum=numberInputOption.Maximum>
                    </MatNumericUpDownField>
                </DataWriterOption>
            }
        }
    }

    @if (this.UserState.ClientState == ClientState.DataVisualizing)
    {
        <div class="chart-settings">
            <MatSubtitle1>Chart Settings</MatSubtitle1>

            <div>
                <MatCheckbox @bind-Value="@this.UserState.VisualizeBeginAtZero" Label="Begin at Zero"></MatCheckbox>
            </div>
        </div>
    }
</div>

<div>

    <div class="configuration-panel">

        <div class="flex-row">
            <div class="configuration-panel-hover fixed-width">
                <label>
                    <span class="icon-button">
                        <i class="fas fa-folder-open"></i>
                        <MatSubtitle2 class="clear-margin">Load</MatSubtitle2>
                    </span>
                    <InputFile OnChange="OnLoadExportSettingsAsync" accept="application/JSON" />
                </label>
            </div>

            <div class="configuration-panel-hover fixed-width">
                <div class="icon-button" @onclick="OnSaveExportSettingsAsync">
                    <i class="fas fa-file-download"></i>
                    <MatSubtitle2 class="clear-margin">Save</MatSubtitle2>
                </div>
            </div>

            @if (this.UserState.CanVisualize())
            {
                <div class="configuration-panel-hover fixed-width @(this.UserState.ClientState == ClientState.DataVisualizing ? "active" : "")">
                    <div class="icon-button" @onclick="this.UserState.ToggleDataVisualization">
                        <i class="fas fa-chart-area"></i>
                        <MatSubtitle2 class="clear-margin">Visualize</MatSubtitle2>
                    </div>
                </div>
            }
            else
            {
                <div class="configuration-panel-hover disabled">
                    <div class="icon-button">
                        <i class="fas fa-chart-area"></i>
                        <MatSubtitle2 class="clear-margin">Visualize</MatSubtitle2>
                    </div>
                </div>
            }

        </div>
    </div>
</div>